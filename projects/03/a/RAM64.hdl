// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=a0, b=a1, c=a2, d=a3, e=a4, f=a5, g=a6, h=a7);
    RAM8(in=in, load=a0, address=address[0..2], out=reg0);
    RAM8(in=in, load=a1, address=address[0..2], out=reg1);
    RAM8(in=in, load=a2, address=address[0..2], out=reg2);
    RAM8(in=in, load=a3, address=address[0..2], out=reg3);
    RAM8(in=in, load=a4, address=address[0..2], out=reg4);
    RAM8(in=in, load=a5, address=address[0..2], out=reg5);
    RAM8(in=in, load=a6, address=address[0..2], out=reg6);
    RAM8(in=in, load=a7, address=address[0..2], out=reg7);
    Mux8Way16(a=reg0, b=reg1, c=reg2, d=reg3, e=reg4, f=reg5, g=reg6, h=reg7, sel=address[3..5], out=out);
}
